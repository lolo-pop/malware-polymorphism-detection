#-*- coding: utf-8 - 
#

import os 
#import extratFunction from *
import sys
from IgraphHelper import *
import csv
import time
import shutil

inputdir = sys.argv[1]
outputdir = sys.argv[2] 

#def functionsGraphsDirectory(functionsGraphsDirectoryPath):
#	return functionsGraphsDirectoryPath
'''
class functionsGraphsDirectory:
	functionsGraphsDirectoryPath = ' '
	def __init__(self, name):
		self.functionsGraphsDirectoryPath = name
	#def getName(path):
	#	self.functionsGraphsDirectoryPath = path
	def printvalue(self):
		print self.functionsGraphsDirectoryPath
'''
def auto_extractFunction(sourcepath, targetpath):
	try:
		startTime=time.time()
		#print sourcepath
		strline = "E:\\design\\program\\IDA6.8\\idaq64.exe -A -SE:\\design\\TRACY\\extractFunctions.py {0}".format(sourcepath)
		print strline
		try :
			os.system(strline)
		except Exception , e:
			pass
		tmpDirctory = "E:\\design\\test\\tmpFunction"
		countAsmLine = 0;
		listSelectFunction = os.listdir(tmpDirctory)
		#print len(listSelectFunction)
		for i in range(len(listSelectFunction)):
			if listSelectFunction[i].split(".")[-1] == "dsm" :
				namegml = listSelectFunction[i].split(".")[-2]+".gml"
				fileNamedsm = os.path.join(tmpDirctory, listSelectFunction[i])
				fileNamegml = os.path.join(tmpDirctory, namegml)
				'''
				if listSelectFunction[i].lower().find("sub") == -1 and listSelectFunction[i].lower().find("main") == -1:
					#print listSelectFunction[i]
					os.remove(fileNamegml)
					os.remove(fileNamedsm)
					continue
				'''

				if len(listSelectFunction[i]) >= 150:
					#print listSelectFunction[i]
					os.remove(fileNamegml)
					os.remove(fileNamedsm)
					continue
				openFileNamedsm = open(fileNamedsm, "r")
				openFileNamegml = open(fileNamegml, "r")
				countInstructions = openFileNamedsm.readline().count(";")
				countTracelet = openFileNamegml.read().count("node")
				#print countConstruction
				if countTracelet < 3 or countInstructions <= 10:
					#print "the file is going to delete"
					openFileNamedsm.close()
					openFileNamegml.close()
					os.remove(fileNamedsm)
					os.remove(fileNamegml)
				else :
					openFileNamedsm.close()
					openFileNamegml.close()
					countAsmLine = countAsmLine + countInstructions
		print countAsmLine
		listFunctionsFolder = os.listdir(tmpDirctory)
		for i in range(len(listFunctionsFolder)):
			dsmFileWeight = 0.0
			if listFunctionsFolder[i].split(".")[-1] == "dsm" :
				Namedsm = listFunctionsFolder[i].split(".")[-2] + ".dsm"
				Namegml = listFunctionsFolder[i].split(".")[-2] + ".gml"
				fileNamedsm = os.path.join(tmpDirctory, listFunctionsFolder[i])
				filedsm = open(fileNamedsm, "r")
				numConstruction = filedsm.readline().count(";")
				print numConstruction
				filedsm.close()
				dsmFileWeight = float(numConstruction)/countAsmLine
				print dsmFileWeight
				#shutil.copy(tmpDirctory+os.sep+Namedsm, targetpath+os.sep+str(dsmFileWeight)+"~"+Namedsm)
				#shutil.copy(tmpDirctory+os.sep+Namegml, targetpath+os.sep+str(dsmFileWeight)+"~"+Namegml)
				shutil.copy(tmpDirctory+os.sep+Namedsm, targetpath+os.sep+Namedsm)
				shutil.copy(tmpDirctory+os.sep+Namegml, targetpath+os.sep+Namegml)
				os.remove(tmpDirctory+os.sep+Namedsm)
				os.remove(tmpDirctory+os.sep+Namegml)
		timeElapse=time.time()-startTime
		print 'Time elapsed: ',timeElapse
		#print 'Extracted sample',sourcepath 
	except Exception , e:
		#print 'Somthing wrong.',sourcepath
		print e


def check_folderOrfile(inputpath, outputpath):
	if os.path.exists(inputpath):
		pass
	else :
		print 'the inputpath is not exist'
		exit(0)
	if os.path.isdir(inputpath):
		listFileFolder = os.listdir(inputpath)
		for i in range(len(listFileFolder)):
			#print inputpath, listFileFolder[i]
			#print (outputpath+os.sep+listFileFolder[i]).replace(' ', '\ ')
			try:
				os.mkdir(outputpath+os.sep+listFileFolder[i])
			except Exception , e:
				#print e
				pass
			auto_extractFunction(inputpath+os.sep+listFileFolder[i], outputpath+os.sep+listFileFolder[i])
	elif os.path.isfile(inputpath):
		auto_extractFunction(inputpath, outputpath)
	else :
		print 'the inputpath is error'


if __name__ == '__main__' : 
	listFamilyFolder = os.listdir(inputdir)
	for i in range(len(listFamilyFolder)):
		#print inputdir, listFamilyFolder[i]
		#if os.path.isdir(inputdir+listFamilyFolder[i]):
		#print listFamilyFolder[i]
		try:
			os.mkdir(outputdir+os.sep+listFamilyFolder[i])
			#print outputdir+os.sep+listFamilyFolder[i]
			#print (outputdir+os.sep+listFamilyFolder[i]).replace(' ','\ ')
		except:
			print 'the folder/file has been existed'
		check_folderOrfile(inputdir+os.sep+listFamilyFolder[i], outputdir+os.sep+listFamilyFolder[i])
		#if os.path.isfile(inputdir+listFamilyFolder[i]) :
		#	os.mkdir()
		#	check_folderOrfile(inputdir+listFamilyFolder[i], outputdir)